<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Striving for Adequacy]]></title>
  <link href="http://calvached.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://calvached.github.io/"/>
  <updated>2014-06-10T23:04:51-05:00</updated>
  <id>http://calvached.github.io/</id>
  <author>
    <name><![CDATA[Diana Calvache]]></name>
    <email><![CDATA[hello@dianathegeek.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re: Is TDD Dead?]]></title>
    <link href="http://calvached.github.io/blog/2014/06/10/re-is-tdd-dead/"/>
    <updated>2014-06-10T11:14:52-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/10/re-is-tdd-dead</id>
    <content type="html"><![CDATA[<!-- title: Test the right thing in the right way -->


<p><img src="http://i.imgur.com/N2unFYi.jpg" alt="Zombie TDD" /></p>

<p>After listening to <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead?</a> and attending DHH&rsquo;s <a href="http://www.confreaks.com/videos/3315-railsconf-keynote-writing-software">talk</a> during RailsConf I have come to the conclusion that TDD is great as long as you test the right thing in the right way. Here&rsquo;s why.</p>

<!-- more -->


<p><strong>What is TDD?</strong><br/>
<img class="right <a" src="href="http://i.imgur.com/FYmJLP9.png">http://i.imgur.com/FYmJLP9.png</a>" title="Place Kitten #2" >
TDD (Test-Driven Development) is a software development process in which you write a failing test that defines a desired outcome, write code to make the test pass, refactor and repeat.</p>

<p>Although this seems simple enough, for a TDD beginner (such as myself) it is very easy to begin by testing the wrong things or the right things, but in the wrong way (it is also equally as easy to get flamed for writing bad tests). Theses sorts of tests can lead to false security, loss of time and could be worse than not testing at all. Therefore, good tests will produce good code and poor tests will produce poor code. But there is hope!</p>

<p><blockquote><p>You donâ€™t learn to write good tests without first writing poor tests. Period.</p><footer><strong>@elight <a href="https://twitter.com/elight/status/475121094450757633">https://twitter.com/elight/status/475121094450757633</a> Twitter</strong></footer></blockquote></p>

<p>A lot of the difficulty in doing TDD has to do with understanding how to design things well. It requires in-depth knowledge of OO design, patterns, SOLID, DRY, etc. Failure to throughly understand these principles will result in poor tests. Another pain point with TDD is that there are also a lot of opinions on how to do TDD, what should and should not be tested, what constitutes a good/bad test, level of abstraction, etc. As a beginner this can be confusing and at times overwhelming because there isn&rsquo;t one right answer (if any at all).</p>

<p>My battle plan for TDD: spiking it out. Thinking through the code by writing it out will help me to visualize where and what to test.</p>

<!-- TDD provides us with guidelines to help us think about design problems.-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So, You Want to Be a Mastermind?]]></title>
    <link href="http://calvached.github.io/blog/2014/05/30/so-you-want-to-be-a-mastermind/"/>
    <updated>2014-05-30T11:10:29-05:00</updated>
    <id>http://calvached.github.io/blog/2014/05/30/so-you-want-to-be-a-mastermind</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/ANjI6Vi.png" alt="Mastermind" /></p>

<p>For the last few days I&rsquo;ve been writing tests for a game I&rsquo;m working on called <strong>Mastermind</strong>.</p>

<!-- more -->


<p>The rules are simple. There are two players, the Codemaker (AI) and the Codebreaker (human player). The Codemaker is in charge of creating a four letter pattern from a given set of six letters (A-F). The Codebreaker&rsquo;s job is to correctly guess the pattern in the least number of tries (max of 10 tries). After each attempt the Codemaker gives the Codebreaker feedback by indicating how many letters are correct and in the right position by returning a &lsquo;o&rsquo; for each exact match. Letters that are in the wrong position, but exist in the pattern will return an &lsquo;x&rsquo;.<br/>
For instance if the Codemaker&rsquo;s pattern were &ldquo;AFDE&rdquo; and the Codebreaker&rsquo;s guess were &ldquo;ADFE&rdquo; then the returned feedback will look like this: &ldquo;ooxx&rdquo;.</p>

<p>There were two particular pieces of logic that were giving me trouble. The first had to do with the logic behind finding letters that matched the CM&rsquo;s pattern in the correct position.</p>

<p>``` ruby Find matching letters with the correct position
def letter_with_position_match(user_guess)</p>

<pre><code>@indexes = []
counter = []
user_guess.each_with_index do |cb_letter, cb_i|
        if @unsolved_pattern.include?(cb_letter)
            @unsolved_pattern.each_with_index do |cm_letter, cm_i|
              if cb_letter == cm_letter &amp;&amp; cb_i == cm_i
                @indexes &lt;&lt; cm_i
                counter &lt;&lt; cb_letter 
              end
            end
        end
    end

counter.length
</code></pre>

<p>end
```</p>

<p>I came up with a working algorithm by iterating through the CB&rsquo;s pattern and the CM&rsquo;s pattern, taking each individual letter and index from both, and comparing them. If a letter matched then it&rsquo;s index also had to match. At this point I also decided that I needed to hold on to those indexes so that I would know which letters haven&rsquo;t been matched yet.</p>

<p>Although this code works, it definitely doesn&rsquo;t look very readable and it&rsquo;s plagued with repetition. After sitting down with my mentor, Kelly, we decided to take this a different route and begin with TDD (test driven development) instead. With TDD you first write a test, then write the code to pass the test, and repeat. With practice, TDD serves as a guideline in writing clean and simple code.</p>

<p>We started with simple tests like the ones below.</p>

<p>``` ruby codemaker_spec.rb <a href="https://github.com/calvached/mastermind/blob/master/spec/codemaker_spec.rb">https://github.com/calvached/mastermind/blob/master/spec/codemaker_spec.rb</a> Source Article
describe CodeMaker do</p>

<p>  context &ldquo;position matches&rdquo; do</p>

<pre><code>it "returns 4 if the guess matches pattern exactly" do
  codemaker = CodeMaker.new
  codemaker.unsolved_pattern = ["A", "B", "E", "E"]
  expect(codemaker.feedback(["A", "B", "E", "E"])).to eq(["o", "o", "o", "o"])
end

it "returns 0 if the guess has no letters in the same position as the pattern" do
  codemaker = CodeMaker.new
  codemaker.unsolved_pattern = ["A", "B", "C", "D"]
  expect(codemaker.feedback(["F", "F", "F", "F"])).to eq([])
end

it "returns 3 if the guess has 3 letters in the same position as the pattern" do
  codemaker = CodeMaker.new
  codemaker.unsolved_pattern = ["A", "B", "C", "D"]
  expect(codemaker.feedback(["A", "B", "C", "F"])).to eq(["o", "o", "o"])
end
</code></pre>

<p>  end
end
```
Each test only tests one small feature. Every new test we wrote became more specific and addressed the next feature that we needed to cover. Eventually our tests looked like <a href="https://github.com/calvached/mastermind/blob/master/spec/codemaker_spec.rb">this</a>.</p>

<p>As a result we were able to improve my icky icky method from before into something more decent and readable.</p>

<p>``` ruby codemaker.rb <a href="https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb">https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb</a> Source Article
def exact_feedback</p>

<pre><code>    @matches_indexes = []
    results = []

    @guess.each_with_index do |letter, i|
        if @unsolved_pattern[i] == letter
            results &lt;&lt; 'o' 
            @matches_indexes &lt;&lt; i
        end
    end

    results
end
</code></pre>

<p>```</p>

<p>The second bump in the road I ran into was in iterating through the CB&rsquo;s guess and checking whether they guessed any letters correctly even if in the wrong position. The problem here was that I didn&rsquo;t want to iterate through letters that were already matched in my first method (which is why I saved the indexes from the first matches).</p>

<p>``` ruby codemaker.rb <a href="https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb">https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb</a> Source Article
def get_unmatched(sequence, matched_placeholder)</p>

<pre><code>new_sequence = sequence.clone

@matches_indexes.each do |position|
    new_sequence[position] = matched_placeholder
end

new_sequence
</code></pre>

<p>  end
```</p>

<p>To find the unmatched letters I first had to clone (or duplicate) the pattern so that my original pattern will stay intact. Using the new cloned pattern I replaced all the letters at every index location with a symbol then returned the new cloned pattern.</p>

<p>``` ruby codemaker.rb <a href="https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb">https://github.com/calvached/mastermind/blob/master/lib/codemaker.rb</a> Source Article
def letter_feedback</p>

<pre><code>results = []

get_unmatched(@guess, '+').uniq.each do |letter|
  results &lt;&lt; 'x' if get_unmatched(@unsolved_pattern, '-').include?(letter)
end

    results
</code></pre>

<p>end
```</p>

<p>Skipping the already matched letters was only part of the problem, the second part involved duplicate letters in the CM&rsquo;s and the CB&rsquo;s patterns. I created an algorithm where I thought I solved the problem by using the .uniq method, but what I didn&rsquo;t take into account was that the CB&rsquo;s pattern also had to be modified for letters that were already matched.<br/>
For instance if the CM&rsquo;s pattern was &ldquo;EDEC&rdquo; and the CB guessed &ldquo;EDDD&rdquo;. I would expect for the feedback to look something like this &ldquo;oo&rdquo;, but instead I was getting &ldquo;oox&rdquo;. By using the get_unmatched method on not only the CM&rsquo;s pattern, but also the CB&rsquo;s pattern I was able to fix the error I was getting.</p>

<p>Mastermind has actually been really fun to build, tear down, build again and refactor! Implementing tests has made it so much easier to work on error cases.</p>
]]></content>
  </entry>
  
</feed>
