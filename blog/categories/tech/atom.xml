<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Striving for Adequacy]]></title>
  <link href="http://calvached.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://calvached.github.io/"/>
  <updated>2014-07-14T14:32:25-05:00</updated>
  <id>http://calvached.github.io/</id>
  <author>
    <name><![CDATA[Diana Calvache]]></name>
    <email><![CDATA[hello@dianathegeek.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dissecting and Demystifying: Reduce/Inject]]></title>
    <link href="http://calvached.github.io/blog/2014/06/23/dissecting-and-demystifying-reduce-slash-inject/"/>
    <updated>2014-06-23T16:30:29-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/23/dissecting-and-demystifying-reduce-slash-inject</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruby-doc.org/core-2.1.0/Enumerable.html#method-i-reduce">Reduce</a> (a.k.a. Inject) is an enumerable method that recently made a whole lot of sense to me, so I figured that it was time to do a deep dive into how <code>reduce</code> works and what it can do for us using Blocks and Symbols.
<!-- more --></p>

<h3 id="block">Block</h3>
<p><code>reduce</code> takes three arguments: a collection, an initial value, and a function. If an initial value isn’t given then it defaults to the first value in the collection.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Integer as initial value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">add_numbers</span>
  (<span class="integer">1</span>..<span class="integer">10</span>).reduce(<span class="integer">0</span>) { |sum, value| sum + value }
<span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;def add_more_numbers
  (1..10).reduce { |sum, value| sum + value }
end&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;add_numbers <span class="comment"># returns 55</span>
add_more_numbers <span class="comment"># returns 55</span>
</pre></div>
</div>
 </figure></notextile></div>
In <code>add_numbers</code> the arguments are as follows:<br />
<strong>Collection</strong>: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10<br />
<strong>Initial Value</strong>: 0<br />
<strong>Function</strong>: Add each element from the collection to the initial value and return a total.</p>

<p><code>reduce</code> initializes the variable “sum” with the value of 0 and keeps a running total of each return value. In other words, a number from the collection is added each time to the initial value and the total sum becomes the new sum for the next value waiting to be added.</p>

<p>Let’s see what this example looks like using <code>each</code> instead:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Using an each method </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">add_numbers</span>
  sum = <span class="integer">0</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;(1..10).each { |value| sum += value }
  sum
end&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;add_numbers <span class="comment"># returns 55</span>
</pre></div>
</div>
 </figure></notextile></div>
 <code>reduce</code> is like an <code>each</code> with superpowers!</p>

<p>Our initial value can also be an array or a hash.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Array as an initial value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">even_numbers</span>
  (<span class="integer">1</span>..<span class="integer">10</span>).reduce([]) <span class="keyword">do</span> |even_arr, value|
    value.even? ? even_arr « value : even_arr
  <span class="keyword">end</span>
<span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;even_numbers # returns [2, 4, 6, 8, 10]&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">side-note-there-must-always-be-a-return-value-or-else-the-accumulator-will-be-returned-as-nil</span><span class="delimiter">&quot;</span></span>&gt;<span class="constant">SIDE</span> <span class="key">NOTE</span>: <span class="constant">There</span> must always be a <span class="keyword">return</span> value <span class="keyword">or</span> <span class="keyword">else</span> the accumulator will be returned as “nil”&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">h1&gt;
&lt;p&gt;</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash as an initial value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">change_structure</span>(data)
  data.reduce({}) <span class="keyword">do</span> |results_hash, element|
    results_hash[element[<span class="integer">0</span>]] = element[<span class="integer">1</span>]
    results_hash
  <span class="keyword">end</span>
<span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;user_info = [[‘username’, ‘carlsagan’], [‘password’,’palebluedot’]]
change_structure(user_info) # returns {“username”=&amp;gt;”carlsagan”, “password”=&amp;gt;”palebluedot”}
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="symbol">Symbol</h3>
<p><code>reduce</code> also accepts a symbol, which makes addition and multiplication very easy and simple to read.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
(<span class="integer">1</span>..<span class="integer">10</span>).reduce(<span class="symbol">:+</span>) <span class="comment"># returns 55</span>
(<span class="integer">1</span>..<span class="integer">10</span>).reduce(<span class="integer">1</span>, <span class="symbol">:+</span>) <span class="comment"># returns 56</span>
</pre></div>
</div>
 </figure></notextile></div>
The <code>:</code> tells Ruby that we are going to give it a symbol, which in our case is a <code>+</code> (this is the name of the addition method, you can also give it a <code>*</code> for the multiplication method). By passing in a symbol we can apply a method to each one of the values in the collection.</p>

<p>The operator methods can be broken down as follows:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="integer">10</span>.+( <span class="integer">2</span> ) <span class="comment"># returns 12</span>
<span class="integer">10</span>.*( <span class="integer">2</span> ) <span class="comment"># returns 20</span>
<span class="integer">10</span>.-( <span class="integer">2</span> ) <span class="comment"># returns 8</span>
<span class="integer">10</span>./( <span class="integer">2</span> ) <span class="comment"># returns 5</span>
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Land of Vim Part 1: getting started]]></title>
    <link href="http://calvached.github.io/blog/2014/06/19/the-land-of-vim-getting-started/"/>
    <updated>2014-06-19T11:57:55-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/19/the-land-of-vim-getting-started</id>
    <content type="html"><![CDATA[<p>Vim is intimidating, there I said it, but it doesn’t have to be!</p>

<p>There were primarily three reasons why I chose to switch over, the first being that a large amount of experienced developers use Vim and it would make it infinitely easier to pair program if I at least knew some basic commands, the second was recognizing the difference in productivity in keybinding vs clicking (I have World of Warcraft to thank for that), the third and last was that Vim made me uncomfortable and I wanted to change that.</p>

<p>Here’s what I did to get started.
<!-- more -->
Vim is installed by default on all Unix based systems, but there is a <a href="http://www.vim.org/download.php#pc">downloadable</a> version for Windows as well. I first came into contact with Vim while on a Linux machine and briefly freaked out because I couldn’t figure out how to exit it, then I downloaded the Windows version where I played around with it for a couple hours, but I didn’t actually start seriously using/learning Vim until I got my Mac. So most of this advice will be geared towards Mac users (Linux users might benefit as well).</p>

<p>On the command line if you type <code>vimtutor</code> this will bring up a really handy tutorial which will go over the basic commands and can be completed in approximately 30 minutes.</p>

<p>There are also various mini-games/tutorials that can help you get used to text navigation and basic commands, the ones I used were:<br />
<a href="http://vim-adventures.com/">Vim Adventures</a><br />
<a href="http://vimgolf.com/">Vim Golf</a><br />
<a href="http://www.openvim.com/tutorial.html">Interactive Vim Tutorial</a><br />
<a href="http://derekwyatt.org/vim/tutorials/">Video Tutorials</a><br />
<a href="http://www.fprintf.net/vimCheatSheet.html">Vim Cheat Sheet</a></p>

<p>The real learning (for me anyway) came when I put this new found knowledge to use by writing code. I learned the navigation fairly quickly, but things like copy/paste, switching between windows/tabs, opening a new window horizontally/vertically, were all things that I had to google a few times before committing it to muscle memory. I learn new commands as I find a use for them rather than trying to memorize a bunch of different commands all at once.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring the lands of Public and Private interfaces]]></title>
    <link href="http://calvached.github.io/blog/2014/06/15/exploring-the-lands-of-public-and-private-interfaces/"/>
    <updated>2014-06-15T15:44:22-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/15/exploring-the-lands-of-public-and-private-interfaces</id>
    <content type="html"><![CDATA[<p>Let’s talk about interfaces (and possibly spaghetti)!!</p>

<p>Interface can mean a bunch of things in different contexts, but in this post I’ll be referring to it as anything that is contained within a Class.
<!-- more -->
Lately, I’ve been reading Sandy Metz’s book, Practical Object Oriented Design in Ruby (affectionately called “POODR”) and I came across an interesting chapter about designing flexible interfaces. Although I have been using Public and Private methods in my code, I never really looked into “why” there should be a distinction between methods in a Class (at the time I also didn’t know what was meant by “interface”).</p>

<p>All Classes implement methods that are meant to be used by others (usually more general methods) and methods only designed to be used inside the Class. The methods that are intended to be used by others are part of what’s called the Public interface. These methods reveal just enough information about the Class to be useful, they should be unsurprising, dependable and reveal the intentions of the Class they belong to. If a Class reveals too much of itself, consequently, it will end up knowing too much of it’s neighbors. This leads to a highly <a href="http://en.wikipedia.org/wiki/Coupling_(computer_programming)">coupled design</a> (in other words: <a href="http://en.wikipedia.org/wiki/Spaghetti_code">Spaghetti Code</a>).</p>

<p><strong>So how can we avoid the terrors of Spaghetti Code??</strong><br />
One way we can combat the evils of Spaghetti Code is to explicitly classify certain method under the Private interface (which basically means “Do not touch or else!”). The Private interface will contain any methods that are not intended to be used by others, cannot be trusted or depended on, they might also handle implementation details and/or can change for any reason.</p>

<p><strong>Let’s explore what Private means in Ruby!</strong><br />
If I use the method <a href="http://ruby-doc.org/core-2.0.0/Module.html#method-i-private">Private</a> in a Class I would expect any method after it (unless I specifically want it <a href="http://ruby-doc.org/core-2.0.0/Module.html#method-i-public">Public</a>) to be “uncallable” from outside of the Class. In Ruby this is not true (not sure if this applies to other languages as well). What Private means in Ruby is that a method cannot be called with an explicit receiver.</p>

<p>For example, this will throw an error because I have an explicit receiver calling private_method_here (I will also get an error if I call private_method_here directly).  </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Explicit Receiver </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">class</span> <span class="class">ExampleClass</span>
  <span class="keyword">def</span> <span class="function">example_method</span>
    <span class="predefined-constant">self</span>.private_method_here
  <span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;private
  def private_method_here
    “You’re not suppose to mess with me!”
  end
end&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;example = <span class="constant">Example</span>.new
example.example_method <span class="comment"># NoMethodError: private method `private_method_here’ called for #&lt;example:0x007f8cb6019420&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></example:0x007f8cb6019420></p>

<p>However, if I call private_method_here with an implicit receiver then no error is thrown!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Implicit Receiver </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">class</span> <span class="class">ExampleClass</span>
  <span class="keyword">def</span> <span class="function">example_method</span>
    private_method_here
  <span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;private
  def private_method_here
    “You’re not suppose to mess with me!”
  end
end&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;p&gt;example = <span class="constant">Example</span>.new
example.example_method <span class="comment"># “You’re not suppose to mess with me!”</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>There are also a few other ways to gain access to private_method_here.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Private isn’t quite so private lol </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">class</span> <span class="class">ExampleClass</span>
  private
  <span class="keyword">def</span> <span class="function">private_method_here</span>
    ‘Hello <span class="constant">Outside</span> <span class="constant">World’</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;example = ExampleClass.new
example.instance_eval{ private_method_here } # “Hello Outside World”
example.send :private_method_here # “Hello Outside World”
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>It seems that Private in Ruby acts more like a suggestion rather than being strictly enforced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re: Is TDD Dead?]]></title>
    <link href="http://calvached.github.io/blog/2014/06/10/re-is-tdd-dead/"/>
    <updated>2014-06-10T11:14:52-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/10/re-is-tdd-dead</id>
    <content type="html"><![CDATA[<p>After listening to <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead?</a> and attending DHH’s <a href="http://www.confreaks.com/videos/3315-railsconf-keynote-writing-software">talk</a> during RailsConf I have come to the conclusion that TDD is great as long as you test the right thing in the right way. Here’s why.
<!-- more -->
<strong>What is TDD?</strong></p>

<p><img src="http://i.imgur.com/FYmJLP9.png" title="TDD" ></p>

<p>TDD (Test-Driven Development) is a software development process in which you write a failing test that defines a desired outcome, write code to make the test pass, refactor and repeat.</p>

<p>Although this seems simple enough, for a TDD beginner (such as myself) it is very easy to begin by testing the wrong things or the right things, but in the wrong way (it is also equally as easy to get flamed for writing bad tests). Theses sorts of tests can lead to false security, loss of time and could be worse than not testing at all. Therefore, good tests will produce good code and poor tests will produce poor code. But there is hope!</p>

<p><blockquote><p>You don’t learn to write good tests without first writing poor tests. Period.</p><footer><strong>@elight</strong> <cite><a href='https://twitter.com/elight/status/475121094450757633'>Twitter</a></cite></footer></blockquote></p>

<p>A lot of the difficulty in doing TDD has to do with understanding how to design things well. It requires in-depth knowledge of OO design, patterns, SOLID, DRY, etc. Failure to throughly understand these principles will result in poor tests. Another pain point with TDD is that there are also a lot of opinions on how to do TDD, what should and should not be tested, what constitutes a good/bad test, level of abstraction, etc. As a beginner this can be confusing and at times overwhelming because there isn’t one right answer (if any at all).</p>

<p>My battle plan for TDD: spiking it out. Thinking through the code by writing it out will help me to visualize where and what to test.</p>

<!-- TDD provides us with guidelines to help us think about design problems.-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hikers in the Woods - An 8th Light Tale]]></title>
    <link href="http://calvached.github.io/blog/2014/06/08/hikers-in-the-woods/"/>
    <updated>2014-06-08T23:25:15-05:00</updated>
    <id>http://calvached.github.io/blog/2014/06/08/hikers-in-the-woods</id>
    <content type="html"><![CDATA[<p>This story was shared with me by my mentor, Kelly, a few days before I started my first day as an apprentice.</p>

<p><em>An apprenticeship is like two hikers in the woods…</em>
<!-- more -->
Imagine you are hiking down a forested trail with your apprentice. Imagine yourself walking beside the apprentice, not out in front. All of a sudden, you stop. Your apprentice stops with you. You both stand in silence. The apprentice is confused, wondering why you’ve stopped. Then all of a sudden, a deer crashes out of the forest, onto the trail right in front of you, then scurries off the other direction.</p>

<p>After the deer is gone, you explain to your apprentice what you saw and heard that alerted you to the deer’s presence. You show the footprints, the scat, and encourage the apprentice to keep an eye out.</p>

<p>Next imagine you come to a fork in the trail. You are familiar with these woods, you know that one trail leads you back home, and the other add 5 miles to your trip. A teacher would pull out a map, show the apprentice your current location, and show which trail to take. But you are not a teacher, you are a mentor. Instead you ask the apprentice to decide. “Which way should we go?” Then if the apprentice asks for a map, you provide the map. If the apprentice takes off down the longer path, you continue to walk along beside them.</p>

<p>Imagine your apprentice chose the long way. When you manage to get where you are going, you raise the question. “I wonder where that other path went.” Then you might pull out the map and show the apprentice how to read it. Not only will the apprentice have gained some knowledge, but they also have 5 extra mile of weariness where the lesson “Check your map at every crossroads” really sets in.</p>

<p>Through the entire day’s hike, you’ve kept the apprentice safe. You’ve always know exactly where you were and how to get back home. You could at any moment, taken charge and avoided any danger.</p>

<!-- Afterthought: -->
]]></content>
  </entry>
  
</feed>
